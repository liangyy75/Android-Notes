http://www.dayila.net/khda/t-nr4k8b.html
第一章、计算机网络和因特网

1.1 什么是因特网
	(1).因特网：一个互联了遍及全世界的数以亿计的计算设备(主机hosts或端系统end system)的网络。
		端系统通过通信链路(communication link)和分组交换机(packet switch)连接。
		分组就是发送端系统将数据分段，并加上首部字母，发送到目的端系统，然后装配成初始数据。
		分组交换机从它的一条入通信链路接受到达的分组，从它的一条出通信链路转发该分组。
		最著名的分组交换机类型是路由器(router，通常用于网络核心)和链路层交换机(link-layer switch，通常用于接入网中)。
		路径(path/route)就是一个分组所经历的一系列通信链路和分组交换机。
		端系统通过ISP(Internet service provider，因特网服务提供商)接入因特网。
		ISP是一个由多个分组交换机和多段链路通信构成的网络。不同的ISP为端系统提供不同的接入。
		高层ISP和底层ISP都是独立管理的，运行IP协议的，遵从一定的命名和地址习惯。
		所有因特网组件都要运行一系列协议(protocol)，这些协议控制因特网中信息的接收和发送，而TCP(Transmission Control Protocol，传输控制协议)和
		IP(Internet Protocol，网络协议)是因特网中最重要的两个协议。IP协议定义了在路由器和端系统之间发送和接收的分组格式。因特网的主要格式分为
		TCP/IP。
		因特网标准(Internet Standard)由因特网工程任务组(Internet Engineering Task Force, IETF)研发，IETF的标准文档称为请求评论(Request For Com
		ment，RFC)。RFC文档定义了TCP、IP、HTTP、SMTP等协议，技术性很强且相当详细。
	(2).分布式应用程序是涉及多台相互交换数据的端系统的应用程序，如电子邮件。
		端系统提供了一个应用程序编程接口(Application Programming Interface)。该API规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一
		个上的特定目的地软件交付数据的方式。因特网API是一套发送软件必须遵循的规则集合，因此因特网能够将数据交付给目的地。
1.2 网络边缘
	(1).主机有时候又分为客户(client)和服务器(server)。
		接入网(access network)指将端系统连接到其边缘路由器(edge router)的物理链路。
		边缘路由器指端系统到其他任何远程端系统的路径上的第一台路由器。
		家庭接入：DSL(数字用户线，Digital Subscriber Line)、电缆、FTTH、拨号和卫星。
		企业(和家庭)接入:以太网和WiFi。
		广域无线接入: 3G和LTE(Long Term Evolution)。
		DSL：家庭电话线同时传输数据和电话信号，它们被编码为不同的频率(高速下行信道，50kHz-1MHz；中速上行信道，4kHz-50kHz；普通双向电话信道，0-
		4kHz)，用户侧分频器将数据和电话信号分隔并将数据信号转发给DSL调制解调器，本地电话公司侧本地中心局DSLAM将数据和电话信号分隔并将数据发送到
		互联网中。
		电缆因特网接入(cable Internet access)利用了有线电视公司现有的有线电视基础设施。住宅从提供有线电视的公司获得了电缆因特网接入。
		光纤到户( Fiber To The Home，FTTH)从本地中心局直接到家庭提供了一条光纤路径。
	(2).包传输延迟 = L位数据需要传输的时间 = L(bits) / R (bits/sec)
	(3).物理媒体的例子包括双绞铜线、同轴电缆、多模光纤缆、陆地无线电频谱和卫星无线电频谱。物理媒体划分为两类:导引型媒体 (guided media) 和非导引
		型媒体( unguided media)。对于导引型媒体，电波沿着固体媒体前行，如光缆、双绞铜线或同轴电缆。对于非导引型媒体，电波在空气或外层空间中传播
		，例如在无线局域网或数字卫星频道中。
		双绞铜线：无屏蔽双绞线(Unsbielded TwisLed Pair，UTP)常用在建筑物内的计算机网络中，即用于局域网(LAN)。目前局域网中的双绞线的数据速率从10
		Mbps到lOGbps所能达到的数据传输速率取决于线的粗细以及传输方和接收方之间的距离。双绞线最终已经作为高速LAN联网的主要方式。
		同轴电缆：能被用作导引型共享媒体(shared meruum)。
		光纤：不受电磁干扰，长达100km光缆信号衰减极低，井且很难窃听，所以是长途引导型传输媒体。然而，高成本的光设备，如发射器、接收器和交换机，
		阻碍光纤在短途传输中的应用，如在 LAN 或家庭接入网中就不使用它们。
		陆地无线电信道：不需物理路线，能穿墙、与移动用户连接以及长距离承载信号。环境上的考虑取决于路径损耗和遮挡衰落(即当信号跨距离传播和绕过/通
		过阻碍物体时信号降低强度)、多径衰落(由于干扰对象的信号反射)以及干扰(由于其他无线电信道或电磁信号)。
		卫星无线电信道：
1.3 网络核心
	网络核心是由互联因特网端系统的分组交换机和物理链路构成的网状网络。通过网络链路和交换机移动数据有两种基本方法:电路交换(circuit swithing)和
	分组交换(packet switching)上。
	(1).分组交换(packet switching)
		存储转发传输(store-and-forward transmission，多数分组交换机在链路的输入端使用这个机制；它指在交换机能够开始向输出链路传输该分组的第一个比
		特之前，必须接收到整个分组)。
		每个分组交换机有多条链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存(output buffer)(也称为输出队列 output queue)，它用于
		存储路由器准备发往那条链路的分组。如果到达的分组需要传输到某条链路，但发现该链路正忙于传输其他分组，该到达分组必须在该输出缓存中等待。因此，
		除了存储转发时延以外，分组还要承受输出缓存的排队时延(queue delay)。一个到达的分组可能发现该缓存已被其他等待缓存的分组完全充满了，这时将出
		现分组丢包(丢包 packet loss)，因为无法存储。
		每个分组的首部被源主机赋予了目的地的IP地址，路由器会根据转发表(forwarding table)将目的地址映射成输出链路。而转发表是路由器根据路由选择协议
		(routing protocol)自动的设置。例如，一个路由选择协议可以决定从每台路由器到每个目的地的最短路径，并使用这些最短路径结果来配置路由器中的转发
		表。
	(2).电路交换(circuit switching)
		电路交换系统中预留了端系统间通信沿路经所需要的资源(缓存、链路传输速率)，而分组交换系统中这些资源不是预留的。
		发送信息前网络在发送方和接收方之间建立的连接称为电路(circuit)，它在创建时网络就为该网络链路预留了恒定的传输速率(表示为每条链路传输容量的
		一部分)。
		链路中的电路是通过频分复用(Frequency-Division Multiplexing，FDM) 或时分复用(Time-Division mu1tiplexing，TDM)来实现的。
	(3).网络的网络
		网络结构1，用单一的全球承载 ISP 互联所有接入 ISP。
		网络结构2，它由数十万接入 ISP 和多个全球承载 ISP 组成
		网络结构3，再加入区域性的多个竞争的区域ISP。
		网络结构4，由接入ISP、区域ISP、第一层ISP、POP(存在点)、多宿、对等和IXP(因特网交换点)组成。
		网络结构5，再加上内容提供商网络(content provider network)。
		接入ISP接入区域ISP，区域ISP接入第一层ISP(全球ISP)。
		为了建造一个与今天因特网更为相似的网络，我们必须在等级结构的网络结构3上增加存在点(Point of Presence, PoP)、多宿、对等和因特网交换点(Intern
		et exchange point, IXP)。
		PoP：只是提供商网络中的一台或多台路由器(在相同位置)群组
		多宿(multi-home)，即可以与两个或更多提供商 ISP 连接。
		位于相同等级结构层次的邻近ISP能够对等(peer)，这就是说，能够直接将它们的网络连到一起，使它们之间的所有流量经直接连接而不是通过上游的中间TSP传输。
		IXP：一个汇合点，多个 ISP 能够在这里共同对等。
		内容提供商网络 (content provider network)。
1.4 分组交换网中的时延、丢包和吞吐量
	(1).时延类型：结点处理时延(node processing delay)、传输时延(transmissing delay)、传播时延(propagation delay)、排队时延(queuing delay)，
		这些加起来就是节点总时延(total node delay)。
		处理时延通常是微不足道的；然而，它对一台路由器的最大吞吐量有重要影响，最大吞吐量是一台路由器能够转发分组的最大速率。
		传输时延是路由器将分组推出所需要的时间，它是分组长度和链路传输速率的函数，而与两台路由器之间的距离无关。而传播时延是一个比特从一台路由器向
		另一台路由器传播所需要的时间，它是两台路由器之间距离的函数，而与分组长度或链路传输速率无关。
	(2).当表征排队时延时，人们通常使用统计量测度，如平均排队时延、排队时延的方差和排队时延超过某些特定值的概率。
		令a表示分组到达队列的平均速率(单位是分组/秒，即pkt/s)，R是传输速率，即从队列中推出比特的速率(以bps即b/s为单位)，所有分组都是由L比特组成的。
		则比特到达队列的平均速率为La bps。最后，假定该队列非常大，因此它基本能容纳无限数量的比特，则比率La/R被称为流量强度(traffic intensity)。
		在估计排队时延的范围方面经常起着重要的作用。如果La/R>1，则比特到达队列的平均速率超过从该队列传输出去的速率。
		到达的分组若发现一个满的队列，由于没有地方存储这个分组，路由器将丢弃(drop)该分组，即该分组将会丢失(lost)
	(3).因为该排队时延随时间变化，分组n发送到路由器n的往返时延实际上能够比分组n+1发送到路由器n+1的往返时延更长。
	(4).在任何时间瞬间的瞬时吞吐量(instantaneous throughput)是主机B接收到某大文件的速率(以bps计)。如果该文件由F比特组成，主机B接收到所有F比特用
		去T秒，则文件传送的平均吞吐量(average lhroughput) F/T bps。
1.5 协议层次及其服务模型
	(1).分层的好处：改变服务不影响其他系统组件；模块化。缺点：存在可能的冗余较低层功能；某层的功能可能需要仅在其他某层才出现的信息(如时间戳值)
		，这违反了层次分离的目标。
		为了给网络协议的设计提供一个结构，网络设计者以分层(layer)的方式组织协议以及实现这些协议的网络硬件和软件。每个协议属于这些层次之一。我
		们再次关注某层向它的上一层提供的服务(service)，即所谓一层的服务模型(service model)。
		各层的所有协议被称为协议栈(protocol stack)。因特网的协议栈由5个层次组成：物理层、链路层、网络层、运输层和应用层。
		应用层协议分布在多个端系统上，一个端系统中的应用程序使用协议与另一个端系统中的应用程序交换信息的分组。我们把这种位于应用层的信息分组称为
		报文(message)。HTTP / SMTP / FTP 协议等等。
		本书中，我们把运输层分组称为报文段(segment)。因特网运输层协议(TCP / UDP)等等。
		因特网的网络层负责将称为数据报(datagram)的网络层分组从一台主机移动到另一台主机。IP 协议、路由选择协议。
		由链路层提供的服务取决于应用于该链路的特定链路层协议。链路层的例子包括以太网、WiFi和电缆接入网的DOCS1S协议。本书中，我们把链路层分组称
		为帧(frame)。
		OSI参考模型的7层是：应用层、表示层、会话层、运输层、网络层、数据链路层和物理层。
		表示层的作用是使通信的应用程序能够解释交换数据的含义，这些服务包括数据压缩和数据加密以及数据描述。
		会话层提供了数据交换定界和同步功能，包括了建立检查点和恢复方案的方法。
	(2).封装：应用层报文和运输层首部信息一道构成了运输层报文段(transport-layer segment)运输层报文段因此封装了应用层报文。运输层则向网络层传递该
		报文段，网络层增加了如源和目的端系统地址等网络层首部信息。该数据报接下来被传递给链路层，链路层增加它自己的链路层首部信息并创建链路层帧(link
		-layer frame)。所以，我们看到在每一层，一个分组具有两种类型的字段：首部字段和有效载荷字段(payload field)。有效载荷通常是来自上一层的分组。
.

第二章、应用层(Application Layer)

IP地址不能唯一识别一台机器，但某个固定时间内却可以。
2.1 应用层协议原理
	(1).应用程序体系结构(applicalion arehilecture)的两种主流体系：客户-服务器体系结构或对等P2P体系结构。
		在一个P2P体系结构(P2P architecture)中，对位于数据中心的专用服务器有最小的(或者没有)依赖相反，应用程序在间断连接的主机对之间使用直接通信，
		这些主机对被称为对等方。
		P2P体系结构的最引人入胜的特性之一是它们的自扩展性(self-scalabi1ity)。
		P2P面临的挑战：ISP友好、安全性、激励。
	(2).在P2P文件共享的某些应用中，一个进程能够既是客户又是服务器。在P2P文件共享系统中，一个进程的确既能上载文件又能下载文件。
		多数应用程序是由通信进程对组成，进程通过一个称为套接字(socket)的软件接口向网络发送报文和从网络接收报文。
		套接字是同一台主机内应用层与运输层之间的接口。应用程序开发者对于运输层的控制仅限于：①选择运输层协议；②也许能设定几个运输层参数，如最大缓存
		和最大报文段长度等。一旦应用程序开发者选择了一个运输层协议，则应用程序就建立在由该协议提供的运输层服务之上。
	(3).接受程序需要有发送程序所在电脑的IP地址和发送程序的标识符(端口号)。
		我们大体能够从四个方面对应用程序服务要求进行分类：可靠数据传输、吞吐量、定时和安全性。
		可靠数据传输(reliable datatransfer)
		容忍丢失的应用(loss-tolerant application)
		可用吞吐量就是发送进程能够向接收进程交付比特的速率。具有吞吐量要求的应用程序被称为带宽敏感的应用(bandwidth-sensitive application)。
		弹性应用(elastic application)。
	(4).TCP服务模型包括面向连接服务和可靠数据传输服务。TCP协议还具有拥塞控制机制，为因特网带来整体好处。
		无论TCP还是UDP都没有提供任何加密机制。所以因特网界已经研制了TCP的加强版本，称为安全套接字层(SecureSocketsLayer,SSL)。我们强调SSL不是与TCP
		或UDP在相同层次上的第三种因特网运输协议，而是一种对TCP的加强，这种强化是在应用层上实现的。如果一个应用程序要使用SSL的服务，需要在该应用程序的
		客户端和服务器端包括SSL代码。
		TCP: reliable transport / flow(流) control / congestion(阻塞) control / connection-oriented / does not provide: timing, minimun th
		roughput, guarantee, security
		UDP: unreliable transport / does not provide: reliability, flow control, congestion control, timing, minimun throughput, guarantee,
		security, orconnection setup,
	(5).应用层协议(application-layer protocol)
		应用层协议(application-layer protocol)定义了运行在不同端系统上的应用程序进程如何相互传递报文：交换的报文类型；各种报文类型的语法；字段的语义
		；一个进程何时以及如何发送报文以及响应报文。
	(6)
2.2 Web和HTTP
	(1).超文本传输协议(HyperText Transfer Protocol, HTTP)是Web的应用层协议，是核心，采用CS架构(由客户端程序和服务器程序组成)。
		HTTP使用TCP作为它的支撑运输协议。
		Web页面(Web page)(也叫文梢)是由对象组成的，一个对象(object)只是一个文件。
		HTML基本文件通过对象的URL地址引用页面中的其他对象。
		每个URL地址由两部分组成：存放对象的服务器主机名和对象的路径名。
		因为HTTP服务器并不保存关于客户的任何信息，所以我们说HTTP是一个无状态协议(stateless protocol)。
	(2).应用程序的(请求/响应)是经一个(单独/相同)的TCP连接发送，则该应用程序被称为使用(非/())持续连接(non-persistent/persistent connection)；
		往返时间(Round-Trip Time, RTT)指一个短分组从客户到服务器然后再返回客户所花费的时间。
		客户请求HTML基本文件起到该客户收到整个文件止所花费的时间，即响应时间就是两个RTT加上服务器传输HTML文件的时间。因此非持续连接每个对象的传输都
		带有两倍的RTT延迟。
	(3).HTTP报文有两种:请求报文和响应报文。
		HTTP请求报文的第一行叫做请求行(request line)，其后继的行叫做首部行(header line)。请求行有3个字段:方法字段、URL字段和HTTP版本字段，方法字段
		可以取几种不同的值，包括 GET POST HEAD PUT DELETE。在首部行(和附加的回车和换行)后有一个"实体体"(entity body)，使用GET方法时实体体为空，而使
		用POST方法时才使用该实体体。
		GET：请求一个对象；POST：和GET相同，但字段是存储在实体体中的，而不像GET在URL一样；HEAD：有HTTP响应报文返回，但不会返回对象；PUT：上传对象到
		指定WEB服务器的指定路径 uploads file in entity body to path specified in URL filed；Delete：允许用户或者应用程序删除Web服务器上的对象 delet
		es files specified in URL filed。
		HTTP响应报文有3个部分:初始状态行(status line)，首部行(header 1ine)，然后是实体体(entity body)。实体体部分是报文的主要部分，即它包含了所请求
		的对象本身。状态行有3个字段：版本、状态码、短语。首部行由首部字段名和值(即键值对)组成。
		• 200 OK: 请求成功 信息在返回的响应报文中
		• 301 Moved Permanently: 请求的对象已经被永久转移了，新的 URL 定义在响应报文的Location: 首部行中 客户软件将自动获取新的 URL
		• 400 Bad Request: 一个通用差错代码，指示该请求不能被服务器理解
		• 404 Not Found: 被请求的文档不在服务器上
		• 505 HTTP Version Not Supported: 服务器不支持请求报文使用的 HTTP 协议版本
		浏览器产生的首部行与很多因素有关，包括浏览器的类型和协议版本、浏览器的用户配置、浏览器当前是否有一个缓存的但是可能超期的对象版本。Web服务器的
		表现也类似：在产品、版本和配置上都有差异，所有这些都会影响响应报文中包含的首部行。
	(4).cookie允许站点对用户进行跟踪，让一个Web站点能够识别用户。
		cookie技术有4个组件: ①在HTTP响应报文中的一个set-cookie首部行;②在HTTP请求报文中的一个cookie首部行;③在用户端系统中保留有一个cookie文件，并
		由用户的浏览器进行管理;④位于Web站点的一个后端数据库。
		cookie可以用于标识一个用户用户首次访问一个站点时，可能需要提供一个用户标识(可能是名字)在后继会话中，浏览器向服务器传递一个cookie首部，从而
		向该服务器标识了用户。因此cookie可以在无状态的HTTP之上建立一个用户会话层。
	(5).Web缓存器(Web cache)也叫代理服务器(proxy server)，它是能够代表初始Web服务器来满足HTTP请求的网络实体。Web缓存器有自己的磁盘存储空间，并在存
		储空间中保存最近请求过的对象的副本。可以配置用户的浏览器，使得用户的所有HTTP请求首先指向Web缓存器。一旦某浏览器被配置，每个对某对象的浏览器
		请求首先被定向到该Web缓存器。
		•浏览器建立一个到Web缓存器的TCP连接，并向Web缓存器中的对象发送一个HTTP请求
		•Web缓存器进行检查，看看本地是否存储了该对象副本。如果有，Web缓存器就向客户浏览器用HTTP响应报文返回该对象
		•如果Web缓存器中没有该对象，它就打开一个与该对象的初始服务器TCP连接。Web缓存器则在这个缓存器到服务器的TCP连接上发送个对该对象的HTTP请求在收
			到该请求后，初始服务器向该Web缓存器发送具有该对象的HTTP响应
		•当Web缓存器接收到该对象时，它在本地存储空间存储一份副本，并向客户的浏览器用HTTP响应报文发送该副本(通过现有的客户浏览器和Web缓存器之间的TCP
			连接)。
		部署Web缓冲器的两个原因：可以大大减少对客户请求的响应时间；能够大大减少一个机构的接入链路到闲特网的通信量。
		通过使用内容分发网络(Content Distribution Network, CDN)，Web缓存器正在因特网中发挥着越来越重要的作用。
	(6).由于存放在缓存器中的对象副本可能是陈旧的，所以需要一个HTTP协议机制：条件GET方法，允许缓存器证实它的对象是最新的。如果：①请求报文使用GET方法
		；并且②请求报文中包含一个"If-Modified-Since: "首部行。那么，这个HTTP请求报文就是一个条件GET请求报文。
2.3 文件传输协议: FTP
	用户通过一个FTP用户代理与FTP交互，该用户首先提供远程主机的主机名，使本地主机的FTP客户进程建立一个到远程主机FTP服务器进程的TCP连接。该用户接
	着提供用户标识和口令，作为FTP命令的一部分在该TCP连接上传送。一旦该服务器向该用户授权，用户可以将存放在本地文件系统中的一个或者多个文件复制
	到远程文件系统(反之亦然)。
	FTP与HTTP都是运行在TCP上的，但也有区别：FTP使用了两个并行的TCP连接来传输文件，一个是控制连接(control connection)，一个是数据连接(data conne
	ction)。控制连接用于在两主机之间传输控制信息，如用户标识、口令、改变远程目录的命令以及"存放(put)"和"获取(get)"文件的命令。数据连接用于实际
	发送一个文件。因为FTP协议使用一个独立的控制连接，所以我们也称FTP的控制信息是带外(out-of-band)传送的。HTTP协议是在传输文件的同一个TCP连接中
	发送请求和响应首部行的，因此，HTTP也可以说是带内(in-band)发送控制信息的。
	而对FTP传输而言，控制连接贯穿了整个用户会话期间，但是对会话中的每一次文件传输都需要建立一个新的数据连接。FTP服务器必须在整个会话期间保留用
	户的状态(state)，对每个进行中的用户会话的状态信息进行追踪，大大限制了FTP同时维持的会话总数。而HTTP是无状态的。
	FTP命令与回答：
		USER username: 用于向服务器发送用户标识；
		PASS password: 用于向服务器发送用户口令；
		LIST：用于请求服务器回送当前远程目录中的所有文件列表。该文件列表是经一个(新建且非持续连接)数据连接传送的，而不是在控制 TCP 连接上传送；
		RETR filename: 用于从远程主机当前目录检索(即get)文件，该命令引起远程主机发起一个数据连接，并经该数据连接发送所请求的文件；
		STOR filename: 用于在远程主机的当前目录上存放(即put)文件。
	可能的报文如下:
		• 331 Usemame OK, Password required(用户名OK，需要口令)
		• 125 Data connection already open; transfer starting(数据连接已经打开，开始传送)
		• 425 Can't open data connection(无法打开数据连接)
		• 452 Error writing file(写文件差错)
2.4 因特网中的电子邮件
	因特网电子邮件系统有3个主要组成部分: 用户代理(user agent)、邮件服务器(mail server)、简单邮件传输协议(Simple Mail Transfer Protocol, SMT
	P)。
	(1).用户代理允许用户阅读、回复、转发、保存和撰写报文。
		SMTP是因特网电子邮件中主要的应用层协议，它使用TCP可靠数据传输服务，从发送方的邮件服务器向接收方的邮件服务器发送邮件。SMTP有两个部分:运
		行在发送方邮件服务器的客户端和运行在接收方邮件服务器的服务器端。每台邮件服务器上既运行SMTP的客户端也运行SMTP的服务器端。当一个邮件服务
		器向其他邮件服务器发送邮件时，它就表现为SMTP的客户;当邮件服务器从其他邮件服务器上接收邮件时，它就表现为SMTP的服务器。SMTP一般不使用中
		间邮件服务器发送邮件，即使这两个邮件服务器位于地球的两端也是这样。SMTP用的是持续连接，如果发送邮件服务器有几个报文发往同一个接收邮件服务
		器，它可以通过同一个TCP连接发送这些所有的报文。
		该客户通过发送一个只包含一个句点的行，向服务器指示该报文结束了。(按照Ascii码的表示方法，每个报文以CRLF.CRLF结束，其中的CR和LF分别表示
		回车和换行)。
	(2).持续的HTTP和SMTP都使用持续连接。它们的区别：
		HTTP主要是一个拉协议(pull protocol)，即在方便的时候，某些入在Web服务器上装载信息，用户使用HTTP从该服务器拉取这些信息。SMTP基本上是一个
		推协议(push protocol)，即发送邮件服务器把文件推向接收邮件服务器。
		SMTP要求每个报文(包括它们的体)使用7比特ASCII码格式。如果某报文包含了非7比特ASCII字符(如具有重音的法文字符)或二进制数据(如图形文件)，则
		该报文必须按照7比特ASCII码进行编码。HTTP数据则不受这种限制。
		如何处理一个既包含文本又包含图形(也可能是其他媒体类型)的文档：HTTP把每个对象封装到它自己的HTTP响应报文中，SMTP则把所有报文对象放在一个
		报文之中。
	(3).邮件报文格式和MIME
		首部行和该报文的体用空行(即回车换行)进行分隔。每个首部必须含有一个From: 首部行和一个To: 首部行；一个首部也许包含一个Subject: 首部行以及
		其他可选的首部行。
	(4).目前有一些流行的邮件访问协议，包括第三版的邮局协议(Post Office Protocol-Version 3, POP3)、因特网邮件访问协议(Internet Mail Access Pr
		otocol, IMAP)以及HTTP。
		SMTP用来将邮件从发送方的邮件服务器传输到接收方的邮件服务器；SMTP也用来将邮件从发送方的用户代理传送到发送方的邮件服务器。POP3这样的邮件
		访问协议用来将邮件从接收方的邮件服务器传送到接收方的用户代理。
		随着建立TCP连接，POP3按照3个阶段进行工作: 特许(authorization，用户代理发送(以明文形式)用户名和口令以鉴别用户)、事务处理(用户代理取回报
		文，还可以对报文做删除标记，取消报文删除标记，以及获取邮件的统计信息)以及更新(结束该POP3会话，同时删除标记删除的报文)。
2.5 DNS: 因特网的目录服务
	因特网主机可以使用多种方式进行标识。主机的一种标识方法是用它的主机名(hostname)。然而，主机名几乎没有提供(即使有也很少)关于主机在因特网中位
	置的信息。因为主机名可能由不定长的字母数字组成，路由器难以处理。由于这些原因，主机也可以使用所谓IP地址(IP address)进行标识。
	(1).人们喜欢主机名，路由器需要IP地址，我们需要一种能进行主机名到IP地址转换的目录服务。这就是域名系统(Domain Name System, DNS)的主要任务。DNS是
		：①一个由分层的DNS服务器(DNS server)实现的分布式数据库；②一个使得主机能够查询分布式数据库的应用层协议。
		DNS协议运行在UDP之上，使用53号端口。
		DNS通常是由其他应用层协议所使用的，包括 HTTP SMTP FTP ，将用户提供的主机名解析为IP地址。
		除了进行主机名到IP地址的转换外，DNS还提供了一些重要的服务：
			主机别名(host aliasing)。有着复杂主机名(也被称为规范主机名(canonical hostname))的主机能拥有1个或者多个别名。
			邮件服务器别名(mail server aliasing)。
			负载分配(load distribution)。DNS也用于在冗余的服务器(如冗余的Web服务器等)之间进行负载分配。
	(2).如果只有一个DNS服务器的问题：
		•单点故障(a single point of failure)。如果该DNS服务器崩溃，整个因特网随之瘫痪!
		•通信容量(traffic volume)。单个DNS服务器不得不处理所有的DNS查询(用于为上亿台主机产生的所有HTTP请求报文和电子邮件报文服务)
		•远距离的集中式数据库(distant centralized database)。单个DNS服务器不可能"邻近"所有查询客户，如果我们将单台DNS服务器放在纽约市，那么所有来自
			澳大利亚的查询必须传播到地球的另一边，中间也许还要经过低速和拥塞的链路，这将导致严重的时延。
		•维护(maintenance)。单个DNS服务器将不得不为所有的因特网主机保留记录，这不仅将使这个中央数据库非常庞大，而且它还不得不为解决每个新添加的主机
			而频繁更新。
		为了处理扩展性问题，DNS使用了大量的DNS服务器，它们以层次方式组织，并且分布在全世界范围内。大致说来，有3种类型的DNS服务器：根DNS服务器、顶
		级域(Top-Level Domain, TLD)DNS服务器和权威DNS服务器。还有另一类重要的DNS，称为本地DNS服务器(local DNS server)。
		递归查询(recursive query)迭代查询(iterative query): 从请求主机到本地DNS服务器的查询是递归的，其余的查询是迭代的。
		DNS缓存(DNS cache)
	(3).共同实现DNS分布式数据库的所有DNS服务器存储了资源记录(Resource Record, RR), RR提供了主机名到IP地址的映射，每个DNS应答报文包含了一条或多条资源
		记。资源记录是一个包含了下列字段的4元组: (Name, Value, Type, TTL)。
		TTL是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间。Name和Value的值取决于Type:
		•如果Type=A，则Name是主机名，Value是该主机名对应的IP地址。因此，一条类型为A的资源记录提供了标准的主机名到IP地址的映射
		•如果Type=NS，则Name是个域(如foo.com)，而Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名。这个记录用于沿着查询链来路由DNS查询
		•如果Type=CNAME，则Value是别名为Name的主机对应的规范主机名。该记录能够向查询的主机提供一个主机名对应的规范主机名。
		•如果Type=MX，则Value是个别名为Name的邮件服务器的规范主机名。MX记录允许邮件服务器主机名具有简单的别名。值得注意的是，通过使用MX记录，一个
			公司的邮件服务器和其他服务器(如它的Web服务器)可以使用相同的别名。为了获得邮件服务器的规范主机名，DNS客户应当请求一条MX记录；而为了获得
			其他服务器的规范主机名，DNS 客户应当请求CNAME记录。
2.6 P2P应用
		使用P2P体系结构，对总是打开的基础设施服务器有最小的(或者没有)依赖。
		两种不同的特别适合于P2 设计的应用：P2P文件发送；分布在大型对等方社区中的数据库。
	(1).P2P文件发送
		在P2P文件分发中，每个对等方能够重新分发它所拥有的该文件的任何部分，从而在分发过程中协助该服务器。到2012年止，最为流行的P2P文件共享协议是BitTorrent。
		P2P与CS结构的对比.example[重点]
		分发时间(distribution time)是所有N个对等方得到该文件的副本所需要的时间。
		P2P中分发时间取决于每个对等方如何向其他对等方分发该文件的各个部分。
	(2).分布式散列表(Distributed Hash Table, DHT)
.

第三章、运输层

3.1	概述和运输层服务
	运输层协议为运行在不同主机上的应用程序之间提供了逻辑通信(logic communication)功能。运输层协议是在端系统中而不是在路由器中实现的。在发送端，
	运输层将从发送应用程序进程接收到的报文转换成运输层分组，用因特网术语来讲该分组称为运输层报文段(segment)。运输层将这些报文段传递给网络层，网
	路层将其封装成网络层分组(即数据报)并向目的地发送。网络路由器仅作用于该数据报的网络层字段；即它们不检查封装在该数据报的运输层报文段的字段。在
	接收端，网络层从数据报中提取运输层报文段，并将该报文段向上交给运输层。运输层则处理接收到的报文段，使该报文段中的数据为接收应用进程使用。
	3.1.1 运输层和网络层的关系
		网络层提供了主机之间的逻辑通信，而运输层为运行在不同主机上的进程之间提供了逻辑通信。
		如果网络层协议无法为主机之间发送的运输层报文段提供时延或带宽保证的话，运输层协议也就无法为进程之间发送的应用程序报文提供时延或带宽保证
		即使底层网络协议不能在网络层提供相应的服务，运输层协议也能提供某些服务。比如：即使底层网络协议是不可靠的，也就是说网络层协议会使分组丢
		失、篡改和冗余，运输协议也能为应用程序提供可靠的数据传输服务。
	3.1.2 因特网运输层概述
		因特网(TCP/IP网络)为应用层提供了截然不同的可用运输层协议：UDP(用户数据报协议)，它为调用它的应用程序提供了一种不可靠、无连接的服务；TCP(
		传输控制协议)，它为调用它的应用程序提供了一种可靠的、面向连接的服务。
		因特网网络层协议有一个名字叫IP，即网际协议。IP为主机之间提供了逻辑通信IP的服务模型是尽力而为交付服务(best-effort delivery service)。即
		IP尽它"最大的努力"在通信的主机之间交忖报文段，但它并不做任何确保(不确保报文段的交付/按序交付/数据的完整性)。由于这些原因，IP被称为不可靠
		服务(unreliable service)。
		UDP、TCP最基本的责任是，将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务。将主机间交付扩展到进程间交付被称为运输
		层的多路复用(transport-layer multiplexing)与多路分解(transport-layer demultiplexing)。UDP、TCP还可以通过在其报文段首部中包括差错检
		查字段而提供完整性检查。进程到进程的数据交付和差错检查是两种最低限度的运输层服务，也是UDP所能提供的仅有的两种服务。与IP一样，UDP也是一种
		不可靠的服务。而TCP为应用程序提供了几种附加服务(可靠数据传输(reliable data transfer)、拥塞控制(congestion control))。
3.2	多路复用与多路分解
	用于将主机间交付扩展到进程间交付的多路复用与多路分解服务是所有计算机网络都需要的。
	一个进程(作为网络应用的一部分)有一个或多个套接字(socket)，它相当于从网络向进程传递数据和从进程向网络传递数据的门户。每个套接字都有唯一的标
	识符，标识符的格式取决于它是UDP还是TCP套接字。
	每个运输层报文段中具有几个字段。在接收端，运输层检查这些字段，标识出接收套接字，进而将报文段定向到该套接字。
	将运输层报文段中的数据交付到正确的套接字的工作称为多路分解(demultiplexing)。
	在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息(这将在以后用于分解)从而生成报文段，然后将报文段传递到网络层，所有这些工作称
	为多路复用(multiplexing)。
	多路复用要求：①套接字有唯一标识符；②每个报文段有特殊字段来指示该报文段所要交付到的套接字。这些特殊字段是源端口号字段(source port number 
	field)和目的端口号字段(destination port number field)。
	端口号是一个16比特的数，其大小在0-65535之间。0-1023范围的端口号称为周知端口号(well-known port number)，是受限制的，这是指它们保留给诸如
	HTTP(它使用端口号80)和ftp(它使用端口号20数据连接？？、21控制连接)之类的周知应用层协议来使用。
	1.无连接的多路复用与多路分解
		一个UDP套接字是由一个二元组来全面标识的，该二元组包含一个目的IP地址和一个目的端口号。
	2.面向连接的多路复用与多路分解
		TCP套接字是由一个四元组(源IP地址，源端口号，目的IP地址，目的端口号)来标识的。
		与UDP不同的是，两个具有不同源IP地址或源端口号的到达TCP报文段将被定向到两个不同的套接字，除非TCP报文段携带了初始创建连接的请求。
	3.Web服务器与TCP
		初始连接建立报文段和承载HTTP请求的报文段都有80的目的端口。
3.3	无连接运输：UDP
	使用UDP的应用是可以实现可靠数据传输的，这可通过在应用程序自身中建立可靠性机制来完成。
	3.3.1 UDP报文段结构
		UDP报文段结构如图3-7所示，它由RFC768定义。应用层数据占用UDP报文段的数据字段。UDP首部只有4个字段，每个字段由两个字节组成。长度字段指示
		了在UDP报文段中的字节数(首部加数据)。因为数据字段的长度在一个UDP段中不同于在另一个段中，故需要一个明确的长度。
	3.3.2 UDP检验和
		发送方的UDP对报文段中的所有16比特字的和进行反码运算，求和时遇到的任何溢出都被回卷。得到的结果被放在UDP报文段中的检验和字段。
3.4	可靠数据传输原理
	rdt_send()/udt_send()代表(可靠/不可靠)数据传输，rdt_rcv()代表可靠数据接收，deliver_data()代表将数据交付到较高层。
	3.4.1 构造可靠数据传输协议
		1. 经完全可靠信道的可靠数据传输：rdt 1.0
			首先，我们考虑最简单的情况，即底层信道是完全可靠的。我们称该协议为rdt 1.0，该协议本身是简单的。
			图3-9 显示了rdt 1.0 发送方和接收方的有限状态机(Finile-Stale Machine, FSM)的定义。
			。。。
			rdt的发送端只通过rdt_send(data)事件接受来自较高层的数据，产生一个包含该数据的分组(经由make_pkt(data)动作)，并将分组发送到信道中。实
			际上，rdt_send(data)事件是由较高层应用的过程调用产生的(例如，rdt_send())。
			接收端，rdt通过rdt_rcv(packet)事件从底层信道接收一个分组，从分组中取出数据(经由extract(packet,data)动作)，并将数据上传给较高层(通过
			deliver_data(data)动作)。实际上，rdt_rcv(packet)事件是由较低层协议的过程调用产生的(例如，rdt_rcv())。
		2. 经具有比特差错信道的可靠数据传输: rdt 2.0
			。。。图、再看一次
			假定所有发送的分组(虽然有些比特可能受损)将按其发送的顺序被接收。
			肯定确认(positive acknowledgment)("OK")与否定确认(negative acknowledgment)("请重复一遍")。这些控制报文使得接收方可以让发送方知道哪
			些内容被正确接收，哪些内容接收有误并因此需要重复。基于这样重传机制的可靠数据传输协议称为自动重传请求(Automatic Repeat request, ARQ)
			协议。
			基本上，ARQ协议中还需要另外三种协议功能来处理存在比特差错的情况：差错检测、接收方反馈、重传(接收方收到有差错的分组时，发送方将重传该
			分组文)。图3-10说明了表示rdt 2.0的FSM，该数据传输协议采用了差错检测、肯定确认与否定确认。
			发送方将不会发送一块新数据，除非发送方确信接收方已正确接收当前分组。即确认前不会发新数据。由于这种行为，rdt2.0这样的协议被称为停等
			(stop-and-wait)协议。
			rdt2.0存在致命的缺陷。尤其是我们没有考虑到ACK、NAK分组受损的可能性!考虑处理受损ACK、NAK时的3种可能性:
			• 对于第一种可能性，考虑在口述报文情况下入可能的做法。。。
			• 第二种可能性是增加足够的检验和比特，使发送方不仅可以检测差错，还可恢差错。对于会产生差错但不丢失分组的信道，这就可以直接解决问题。
			• 第三种方法是，当发送方收到含糊不清的ACK、NAK分组时，只需重传当前数据分组即可。然而，这种方法在发送方到接收方的信道中引入了冗余分组
			(duplicate packet)冗余分组的根本困难在于接收方不知道它上次所发送的ACK/NAK是否被发送方正确地收到。因此它无法事先知道接收到的分组是新
			的还是一次重传。
			解决这个新问题的一个简单方法(几乎所有现有的数据传输协议中，包括TCP，都采用了这种方法)是在数据分组中添加一新字段，让发送方对其数据分
			组编号，即将发送数据分组的序号(sequence number)放在该字段。于是，接收方只需要检查序号即可确定收到的分组是再一次重传。
			图3-11和图3-12给出了对rdt2.1的FSM描述，这是rdt2.0的修订版。rdt2.0的发方和提收方FSM的状态数都是以前的两倍。这是因为协议状态此时必须反
			映出目前向发送方)正发送的分组或(在搜收方)希望接收的分组的序号是0还是1。发送或期望接收0号分组的状态中的动作与发送或期望接收1号分组的
			状态中的动作是相似的；唯一的不同是序号处理的方法不同。
			rdt2.2是在有比特差错信道上实现的一个无NAK的可靠数据传输协议，如图3-13和图3-14所示。rdt2.1和rdt2.2之间的细微变化在于，接收方此时必须
			包括由一个ACK报文所确认的分组序号(这可以通过在接收方FSM中，在make_pkt()中包括参数ACK0或ACK1来实现)，发送方此时必须检查接收到的ACK报
			文中被确认的分组序号(这可通过在发送FSM中，在isACK()中包括参数0或1来实现)。
		3. 经具有比特差错的丢包信道的可靠数据传输: rdt 3.0
			除了比特受损外，底层信道还会丢包，这在今天的计算机网络(包括因特网)中并不罕见。协议现在必须处理另外两个关注的问题:怎样检测丢包以及发
			生丢包后该做些什么。rdt2.2中已经研发的技术，如使用检验和、序号、ACK分组和重传等，使我们能给出后一个问题的答案。为解决第一个关注的问
			题，还需增加一种新的协议机制。
			新机制(time out)：如果一个分组经历了一个特别大的时延，发送方可能会重传该分组，即使该数据分组及其ACK都没有丢失 这就在发送方到接收方
			的信道中引入了冗余数据分组(duplicate data packet)的可能性。幸运的是，由 2.2 协议已经有足够的功能(即序号)来处理冗余分组情况。
			为了实现基于时间的重传机制，需要一个倒计数定时器(countdown timer)，在一个给定的时间量过期后，可中断发送方。因此，发送方需要能做到：
			①每次发送一个分组(包括第一次分组和重传分组)时，便启动一个定时器。②响应定时器中断(采取适当的动作)。③终止定时器。
			因为分组序号在0和1之间交替，因此rdt3.0有时被称为比特交替协议(altemating-bit protocol)。
			。。。
	3.4.2 流水线可靠数据传输协议
		rdt 3.0性能问题的核心在于它是一个停等协议。
		rdt 3.0停等性能.example -- P144
		解决这种特殊的性能问题的一个简单方法是：不使用停等方式运行，允许发送方发送多个分组而无需等待确认。
		因为许多从发送方向接收方输送的分组可以被看成是填充到一条流水线中，故这种技术被称为流水线(pipelining)。水线技术对可靠数据传输协议可带来
		如下影响：
		• 必须增加序号范围，因为每个输送中的分组(不计算重传的)必须有一个唯一的序号，而且也许有多个在输送中未确认的报文。
		• 协议的发送方和接收方两端也许必须缓存多个分组。发送方最低限度应当能缓冲那些已发送但没有确认的分组。如下面讨论的那样，接收方或许也需要
			缓存那些已正确接收的分组。
		• 所需序号范围和对缓冲的要求取决于数据传输协议如何处理丢失、损坏及延时过大的分组。解决流水线的差错恢复有两种基本方法是：回退(Go-Back-N
			, GBN)和选择重传(Selective Repeat. SR)。
	3.4.3 回退N步
		在回退N步(GBN)协议中，允许发送方发送多个分组(当有多个分组可用时)而不需等待确认，但它也受限于在流水线中未确认的分组数不能超过某个最大允
		许数N。
		如果我们将基序号(base)定义为最早的未确认分组的序号，将下一个序号(nextseqnum)定义为最小的未使用序号(即下一个待发分组的序号)，则可将序号
		范围分割成4段。[0 base-l]段内的序号对应于已经发送并被确认的分组。[base, nextseqnum-1]段内对应已经发送但未被确认的分组。[nextseqnum base
		+N-1]段内的序号能用于那些要被立即发送的分组，如果有数据来自上层的话。最后，大于或等于base+N的序号是不能使用的，直到当前流水线中未被确认
		的分组(特别是序号为base的分组)已得到确认为止。
		那些已被发送但还未被确认的分组的许可序号范围可以被看成是一个在序号范围内长度为N的窗口。随着协议的运行，该窗口在序号空间向前滑动。因此，
		N常被称为窗口长度(window size)，GBN协议也常被称为滑动窗口协议(sliding-window protocol)。
		不允许这些分组为无限制的数目的原因：流量控制是对发送方施加限制的原因之一；学习TCP拥塞控制时分析另一个原因。
		在实践中，一个分组的序号承载在分组首部的一个固定长度的字段中。如果分组序号字段的比特数是k，则该序号范围是[0, 2^k-l]个有限的序号范围内，
		所有涉及序号的运算必须使用模k运算。比如rdt3.0的k就是1，序号范围是[0, 1]。
		TCP有一个32比特的序号字段，其中的TCP序号是按宇节流中的字节进行计数的，而不是按分组计数。
		图3-20和图3-21[重点]给出了一个基于ACK、无NAK的GBN协议的发送方和接收方这两端的扩展FSM描述(称为扩展是因为添加了变量base和nextseqnum)。
		GBN发送方必须响应三种类型的事件:
		• 上层的调用：上层调用rdt_send()时，发送方首先检查发送窗口是否已满，如果窗口未满，则产生一个分组并将其发送，并相应地更新变量。如果窗口
			已满，发送方只需将数据返回给上层，隐式地指示上层该窗口已满，然后上层可能会过一会儿再试。在实际实现中，发送方更可能缓存(并不立刻发送
			)这些数据，或者使用同步机制(如一个信号量或标志)允许上层在仅当窗口不满时才调用rdt_send()。
		• 收到一个ACK。GBN协议中，对序号为n的分组的确认采取累积确认(cumulative acknowledgment)的方式。
		• 超时事件。如果出现超时，发送方重传所有已发送但还未被确认过的分组。如果收到一个ACK，但仍有已发送但未被确认的分组，则定时器被重新启；如
			果没有已发送但未被确认的分组，该定时器被终止。
		GBN接收方：如果一个序号为n的分组被正确接收到，并且按序(即上次交付给上层的数据是序号为n-1的分组)，则接收方为分组n发送一个ACK，并将该分组
		中的数据部分交付到上层。在所有其他情况下，接收方丢弃该分组，并为最近按序接收的分组重新发送ACK。
		到因为一次交付给上层一个分组，如果分组k已接收并交付，则所有序号比k小的分组也已经交付。
		...
		GBN协议中综合了我们将在 3.5 节中学习 TCP 可靠数据传输构件时遇到的所有技术 这些技术包括使用序号、累积确认、检验和以及超时/重传操作。
	3.4.4 选择重传
		GBN本身也有一些情况存在着性能问题，尤其是当窗口氏度和带宽时延积都很大时，在流水线中会有很多分组更是如此。
		选择重传(SR)协议通过让发送方仅重传那些它怀疑在接收方出错(即丢失或受损)的分组而避免了不必要的重传。
		与GBN不同的是，发送方已经收到了对窗口中某些分组的ACK。
		图 3.23 和 图 3.24 和 图 3.25 和 图 3.26 -- P151
		窗口长度比须小于或等于序号空间大小的一半。 -- 图 3.27
3.5	面向连接的运输：TCP
	3.5.1 TCP连接
		TCP被称为是面向连接的(connection-oriented)，这是因为在一个应用进程可以开始向另一个应用进程发送数据之前，这两个进程必须先相互"握手"，即
		它们必须相互发送某些预备报文段，以建立确保数据传输的参数。
		TCP协议只在端系统中运行，而不在中间的网络元素(路由器和链路层交换机)中运行，所以中间的网络元素不会维持TCP连接状态。事实上，中间路由器
		对TCP连接完全视而不见，它们看到的是数据报，而不是连接。
		TCP连接提供的是全双工服务(full-duplex service)(node里面的双工流一样)。
		TCP连接也总是点对点(point-to-point)的，即在单个发送方与单个接收方之间的连接。
		TCP将要发送的上层给的数据引导到该TCP连接的发送缓存(send buffer)里，发送缓存是在三次握手初期设置的缓存之一。
		TCP可从缓存中取出并放入报文段中的数据数量受限于最大报文段长度(Maximum Segment Size, MSS)。MSS通常根据最初确定的由本地发送主机发送的最
		大链路层帧长度(即所谓的最大传输单元(Maximum Transmission Unit, MTU))来设置。设置该MSS要保证一个TCP报文段(当封装在一个IP数据报中)加上TC
		P/IP首部长度(通常40字节)将适合单个链路层帧。以太网和PPP链路层协议都具有1500字节的MTU，因此MSS的典型值为1460字节。
		MSS是指在报文段里应用层数据的最大长度，而不是指包括TCP首部的TCP报文段的最大长度。
		TCP连接还有接受缓存。
		TCP连接的组成包括：一台主机上的缓存、变量和与进程连接的套接字，以及另一台主机上的另一组缓存、变量和与进程连接的套接字。如前面讲过的那样
		，在这两台主机之间的网络元素(路由器、交换机和中继器)中，没有为该连接分配任何缓存和变量。
	3.5.2 TCP报文段结构
		TCP报文段由首部字段和一个数据宇段组成 数据字段包含一块应用数据。MSS限制了报文段数据字段的最大长度。当TCP发送一个大文件，TCP通常是将该文
		件划分成长度为MSS的若干块(最后一块除外，它通常小于MSS)。然而，交互式应用通常传送长度小于MSS的数据块。例如telnet通常传输一个字节，而TCP
		首部通常有20字节(比UDP首部多12字节)，所以Telnet发送的报文段也许只有21字节长。
		图 3-29 -- P157~P158
		。。。
		TCP报文段首部中两个最重要的字段是序号字段和确认号字段。一个报文段的序号(sequence number for a segment)是该报文段首字节的字节流编号。主
		机A填充进报文段的确认号是主机A期望从主机B收到的下一字节的序号(可能是丢包时的丢掉的包，可以提供累积确认)。
		对客户到服务器的数据的确认被装载在一个承载服务器到客户的数据的报文段中;这种确认被称为是被捎带(piggybacked)在服务器到客户的数据报文段中
		的。
	3.5.3 往返时间的估计与超时
		1. 估计往返时间
			EstimatedRTT.explain(P161)、DevRTT、SampleRTT
			EstimatedRTT = (1 -α) * EstimatedRTT +α * SampleRTT。α参考值是0.125
			DevRTT = (1 -β) * DevRTT +β * |SampleRTT - EstimatedRTT|。β推荐值0.25
		2. 设置和管理重传超时间隔
			TimeoutInterval = EstimatedRTI + 4 * DevRTT。推荐的初始TimeoutInterval值为1秒。
			当出现超时后，TimeoutInterval值将加倍，以免即将被确认的后继报文段过早出现超时
	3.5.4 可靠数据传输
		因特网的网络服务(IP服务)不可靠，不保证数据报的交付，不保证数据报的按序交付，也不保证数据报中数据的完整性。
		推荐的定时器管理过程仅使用单一的重传定时器，可以减少性能开销，TCP就遵守这个推荐。
		简化的TCP发送方 -- 图 3-33(P163-164)
		三种有趣情况
		如果一个报文的ACK一直没收到，又没有数据要传输，则超时后超时间隔加倍。否则只要收到ack或者要传输数据，则TimeoutInterval由最近的Estimated
		RTT值与DevRTT值推算得到。因为超时可能是因为拥塞，所以这个可以避免源持续重传分组，不会造成更拥塞。
	3.5.5 流量控制
		• LastByteRead: 接受主机上的应用进程从缓存读出的数据流的最后1个字节的编号
		• LastByteRcvd: 从网络中到达的并且已放入接受主机接收缓存中的数据流的最后字节的编号
		由于TCP不允许已分配的缓存溢出，下式必须成立: LasLByteRcvd - LastByteRead ≤ RcvBuffer 
		接收窗口用rwnd表示，根据缓存可用空间的数量来设置: rwnd = RcvBuffer - [LastByteRcvd - LastßyteRead ]
		当接受主机的接收窗口为0时，发送主机继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认，最终缓存将开始清空，并且确认报文里将包含
		1个非0的rwnd值。
	3.5.6 TCP连接控制
3.6	拥塞控制原理
	3.6.1 拥塞原因与代价
		巨大的排队时延：拥塞网络的一种代价，即当分组的到达这率接近链路容量时，分组经历巨大的排队时延
		不必要的重发：另一种网络拥塞的代价，即发送方必须执行重传以补偿因为缓存溢出而丢弃的分组
		不必要的转发：网络拥塞的另一种代价，即发送方在遇到大时延时所进行的不必要重传会引起路由器利用其链路带宽来转发不必要的分组副本
		传输容量的浪费：由于拥塞而丢弃分组的另一种代价，即当一个分组沿一条路径被丢弃时，每个上游路由器用于转发该分组到丢弃该分组而使用的传输容量最终
		被浪费掉了
	3.6.2 拥塞控制方法
		端到端拥塞控制：网络层没有为运输层拥塞控制提供显式支持 即使网络中存在拥塞，端系统也必须通过对网络行为的观察(如分组丢失与时延)来推断之
			TCP必须通过端到端的方法解决拥塞控制，因为IP层不会向端系统提供有关网络拥塞的反馈信息
		网络辅助的拥塞控制：网络层构件(即路由器)向发送方提供关于网络中拥塞状态的显式反馈信息。这种反馈可以简单地用一个比特来指示链路中的拥塞情况
			更复杂的网络反馈也是可能的 例如，我们很快将学习的一种ATM ABR拥塞控制形式，它允许路由器显式地通知发送方，告知它(路由器)能在输出链路上支持的
			传输速率。关于源端是增加还是降低其传输速率，XCP协议对每个源提供了路由器计算的反馈，该反馈携带在分组首部中
	3.6.3 网络辅助的拥塞控制例子: ATM ABR 拥塞控制
		ATM基本上采用一种面向虚电路(VC)的方法来处理分组交换。从源到目的地路径上的每台交换机将维护有关源到目的地VC的状态。
		ATM的ABR机制使用了网络辅助的拥塞控制：路由器发送阻塞分组给源或者修改和更新分组中特定字段给汇后汇发送分组给源。而ABR机制中阻塞分组叫资源管理
		信元(Resource-Management cell，RM信元)。ABR提供三种机制用于从交换机向接收方发送与拥塞相关的信令信息:
		• EFCI比特：每个数据信元都包含1比特的显式转发拥塞指示(Explicit Forward Congestion Indication，EFCI)比特。某拥塞的网络交换机可把一个数
		据信元中的EFCI比特设置为1来向目的主机发送网络已经拥塞的信令。
		• CI和NI比特：如上所述，发送方到接收方的RM信元是夹杂在数据单元主与中的。RM信元的夹杂比率是一个可调参数，默认值是每32个数据信元中有一个RM
		信元。这些RM信元中有一个拥塞指示(Congestion Indication,CI)比特和无增长(No Increase,NI)比特，这两个比特可被一台拥塞的交换机设置。交换机
		机可以在轻微拥塞时将经过的RM信元中的NI比特置为1，在严重拥塞时，把CI比特置为1。当目的主机收到一个RM信元时，它将把该RM信元发回给发送方，
		而保持CI、NI比特不变(除了CI比特也许会因为上面描述的EFCI机制而由目的端置为1之外)。
		• ER的设置。每一个RM信元还包含一个两字节的显式速率(Explicit Rate,ER)字段。一个拥塞的交换机也许会降低经过的RM信元中宇段所包含的值。
		以这种方式，ER字段将被设置为在源至日的地的路径上的所有交换机中的最小可支持速率。
3.7 TCP拥塞控制
	TCP必须使用端到端拥塞控制而不是使网络辅助的拥塞控制，因为TP层不向端系统提供显式的网络拥塞反馈。
	TCP所采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其能向连接发送流量的速率。如果一个TCP发送方感知从它到目的地之间的路径上没什么拥塞，
	则TCP发送方增加其发送速率;如果发送方感知沿着该路径有拥塞，则发送方就会降低其发送速率。
	TCP连接的每一端都是由一个接收缓存、一个发送缓存和几个变量(LastByteRead rwnd等)组成。运行在发送方的TCP拥塞控制机制跟踪一个额外的变量，即拥塞窗
	口(congestion window) 。拥塞窗口表示为cwnd ，它对一个TCP发送方能向网络中发送流量的速率进行了限制。特别是，在一个发送方中未被确认的数据量不会超
	过cwnd与rwnd中的最小值，即：LastByteSent - LastByteAcked <= min(cwnd，rwnd)。
	一个TCP发送方的"丢包事件"定义为:要么出现超时，要么收到来自接收方的3个冗余ACK。
	TCP发送方如何确定它们的发送速率，既使得网络不会拥塞，与此同时又能充分利用所有可用的带宽? TCP发送方是显式地协作，或存在一种分布式方法使TCP发送方
	能够仅基于本地信息设置它们的发送速率?
	• 一个丢失(超时或3个冗余ACK)的报文段表意味着拥塞，因此当丢失报文段时应当降低TCP发送方的速率。
	• 一个确认报文段指示该网络正在向接收方交付发送方的报文段，因此，当对先前未确认报文段的确认到达时，能够增加友送方的速率。
	• 带宽探测。给定ACK指示源到目的地路径无拥塞，而丢包事件指示路径拥塞，TCP调节其传输速率的策略是增加其速率以响应到达的ACK，除非出现丢包事件，此时
	才减小传输速率
	TCP拥塞控制算法(TCP congestion control algorithm)：①慢启动;②拥塞避免;③快速恢复。
	在慢启动(slow-start)状态，cwnd的值以1个MSS开始并且每当传输的报文段首次被确认就增加1个MSS。这一过程每过一个RTT ，发送速率就翻番。如果存在一个由超时
	指示的丢包事件(即拥塞)，TCP发送方将cwnd设置为1并重新开始慢启动过程.它还将第二个状态变量的值ssthresh("慢启动阔值"的速记)设置为cwnd/2。即当检测到拥塞
	时将ssthresh置为拥塞窗口值的一半。慢启动结束的第二种方式是直接与ssthresh的值相关联。，当cwnd的值等于ssthresh时，结束慢启动并且TCP转移到拥塞避免模式
	。如果检测到3个冗余ACK，这时TCP执行一种快速重传并进入快速恢复状态。
	在拥塞避免状态，对于TCP发送方无论何时到达一个新的确认，就将cwnd增加一个MSS(MSS/ cwnd)字节，即每个RTT只将cwnd的值增加一个MSS。
	。。。
	TCP的拥塞控制是：每个RTT内cwnd线性(加性增)增加lMSS，然后出现3个冗余ACK事件时cwnd减半(乘性减)因此，TCP拥塞控制常常被称为“加性增、乘性减”(Additive-ln
	crease, Multiplicative-Decrease, AIMD) 拥塞控制方式。
	当窗口长度是w字节，且当前往返时间是RTT秒时，则TCP的发送速率大约是ω/RTT。当一个丢包事件发生时，用W表示w的值。假设在连接持续期间RTT和W几乎不变，那么TCP
	的传输速率在W/(2RTT)到W/RTT之间变化。因此一条连接的平均速率是0.75W/RTT。丢包率L、往返时间RTT和最大报文段氏度MSS的函数：一条连接的平均吞吐量 = 
	1.22MSS/np.power(L, 0.5)*RTT
3.8	小结


第四章、网络层

与运输层和应用层不同的是，在网络中的每一台主机和路由器中都有一个网络层部分。如此，网络层协议是协议战中最具挑战性(因而也是最有趣)的部分。

4.1 概述
	4.1.1 转发和路由选择
		网络层的作用：即将分组从一台发送主机移动到一台接收主机。需要的功能：
		• 转发。当一个分组到达路由器的一条输入链路时，路由器必须将该分组移动到适当的输出链路
		• 路由选择。当分组从发送方流向接收方时，网络层必须决定这些分组所采用的路由或路径。计算这些路径的算法被称为路由选择算法(routing algorithm)。
		每台路由器具有一张转发表(forwarding table)。路由器通过检查到达分组首部字段的值来转发分组，然后使用该值在该路由器的转发表中索引查询。存储在转
		发表项中的该首部的值指出了该分组将被转发的路由器的输出链路接口。分组首部中的该值可能是该分组的目的地址或该分组所属连接的指示，这取决于网络层协
		议。
		在某些计算机网络中，实际上有第3种重要的网络功能，即连接建立(connection setup)
		• 连接建立：类似运输层的TCP一样维护传输状态。某些网络层体系结构如ATM、帧中继、MPLS，要求从源到目的地沿着所选择的路径彼此握手，以便在给定源到
		目的地连接中的网络层数据分组能够开始流动之前建立起状态。
	4.1.2 网络服务模型
		网络服务模型(network service model)定义了分组在发送与接收端系统之间的端到端运输特性。当运输层向网络层传递一个分组时，能由网络层提供的特定服
		务包括: • 确保交付 • 具有时延上界的确保交付 • 有序分组交付 • 确保最小带宽 • 确保最大时延抖动 • 安全性服务。
		因特网的网络层提供了单一的服务，称为尽力而为服务(best-effort service)，即无服务。
		两个最重要的ATM服务模型是恒定比特率和可用比特率服务:
		• 恒定比特率(Constant Bit Rale , CBR)ATM网络服务：使网络连接看起来就像在发送与接收主机之间存在一条专用的、固定带宽的传输链路，以使用性质相同
		的虚拟管道来提供分组(ATM术语称为信元)流。使用CBR服务，ATM信元流以如下方式被承载跨越网络，即一个信元的端到端时延、信元端到端时延中的可变性(即时
		延抖动)及丢失或推迟交付的信元的比率都确保在特定值以下。当第一次建立CBR连接时，发送主机与ATM络认可了这些值。
		• 可用比特率(Available Bit Rale, ABR)ATM网络服务：ATM的ABR也许最好被刻画为比尽力而为服务稍好一点的服务。与因特网服务模型一样，AßR服务下的信
		元也许会丢失。然而与因特网不同的是，信元不能被重排序(虽然它们可能丢失)，对于使用ABR服务的连接来说，最小信元传输速率(MCR)是可以得到保证的。如果
		在给定时间内网络有足够的空闲资源，发送方也可以用比 MCR 更高的速率成功地发送数据。ATM ABR服务能够为发送方提供反馈信息(利用一个拥塞通知比特，或一
		个明确的速率发送) ，以便撞制发送方在 MCR 和一个允许的峰值信元速率之间调整其速率。
4.2 虚电路和数据包网络
	网络层也能够在两台主机之间提供无连接服务或连接服务，网络层的连接和无连攘服务在许多方面与运输层的面向连接和无连接服务类似。例如，网络层连接服务以源和
	目的主机间的握手开始;网络层元连接服务则没有任何握手预备步骤。
	网络层连接和无连接服务与运输层面向连接和无连接服务差别：
	• 在网络层中，这些服务是由网络层向运输层提供的主机到主机的服务，在运输层中，这些服务则是运输层向应用层提供的进程到进程的服务。
	• 网络层不同时提供连接和无连接服务。仅在网络层提供连接服务的计算机网络称为虚电路(Virtual-Circuit, VC) 网络；仅在网络层提供无连接服务的计算机网络称
	为数据报网络(datagram network)。
	• 运输层面向连接服务是在位于网络边缘的端系统中实现的；网络层连接服务除了在端系统中，也在位于网络核心的路由器中实现。
	4.2.1 虚电路网络
		一条虚电路的组成如下:①源和目的主机之间的路径(即一系列链路和路由器)；②VC号，沿着该路径的每段链路的一个号码；③沿着该路径的每台路由器中的转发表表项
		，属于一条虚电路的分组将在它的首部携带一个VC。因为一条虚电路在每条链路上可能具有不同的VC号，每台中间路由器必须用一个新的VC号替代每个传输分组的VC
		号。该新的VC号从转发表获得。
		无论何时跨越一台路由器创建一条新的虚电路，转发表就增加了一个新表项。类似地，无论何时终止一条虚电路，沿着该路径每个表中的相应项将被删除。
		一个分组沿着其路由在每条链路上不简单地保持相同的VC号的原因：①逐链路代替该号码减少了在分组首部中VC宇段的长度。②通过允许沿着该虚电路路径每条链路有
		一个不同的VC号，大大简化了虚电路的建立。
		在虚电路中有3个明显不同的阶段：
		• 虚电路建立：在建立阶段，发送运输层与网络层联系，指定接收方地址，等待网络建立虚电路。网络层决定路径和路径上每段链路的VC号，并为路由器添加表项。
		这时网络层还可以预留该虚电路路径上的资源。
		• 数据传输。
		• 虚电路拆除：发送方(或接收方)通知网络层它希望终止该虚电路时，网络层通常将通知网络另一侧的端系统结束呼叫，并更新路径上每台分组路由器中的转发表。
		端系统向网络发送指示虚电路启动与终止的报文，以及路由器之间传递的用于建立虚电路(即修改路由器表中的连接状态)的报文，它们被称为信令报文(signaling m
		essage)，用来交换这些报文的协议常称为信令协议(signaling protocol)。
	4.2.2 数据报网络
		使用最长前缀匹配规则(longest prefix matching rule)。
	4.2.3 虚电路和数据报网络的由来
		因特网使用数据报网络的好处：
		• 由于所产生的因特网服务模型使服务保证最少(没有)，它对网络层施加了最限度的需求。这使得互联使用各种不同链路层技术而且具有十分不同的传输速率和丢包
		特性的网络变得更加容易。
		• 诸如电子邮件、Web等应用，甚至如DNS这样的网络基础设施都是在位于网络边缘的主机(服务器)上实现的。增加一个新服务只需连接一台主机到网络中，并定义一
		个新的应用层协议(如HTTP即可，这种能力可以使如Web之类的新服务能在相当短的时间内在因特网上得以部署。
4.3 路由器工作原理
	通用路由器体系结构
	• 输入端口：将1条输入的物理链路与路由器相连接的物理层功能；与位于入链路远端的数据链路层交互的数据链路层功能；查询转发表决定路由器的输出端口。
	• 交换结构：将路由器的输入端口与输出端口相连接。
	• 输出端口：存储和传输。
	• 路由选择处理器：执行路由选择协议；维护路由选择表以及连接的链路状态信息，并为路由器计算转发表；执行网络管理功能。
	一台路由器的输入端口、输出端口和交换结构共同实现了这种转发功能，并且总是用硬件实现。这些转发功能有时总称为路由器转发平面(router forwarding plane)。
	路由器控制平面(router control plane)。
	4.3.1 输入端口
		维持一份影子副本，不用时时刻刻调用路由选择处理器。
		由于速度的要求，对路由表执行硬件查找。
		物理层和链路层处理：将物理链路与路由器相连；与入链路远端的物理链路层交互。
		必须检查分组的版本号、检验和以及寿命字段，并且重写后两个字段。
		必须更新用于网络管理的计数器(如接收到的IP数据报的数目)。
	4.3.2 交换结构
		• 经内存交换：最简单、最早的路由器是传统的计算机，在输入端口与输出端口之间的交换是在CPU(路由选择处理器)的直接控制下完成的。不能同时转发两个分组，
		即使它们有不同的端口号，因为经过共享系统总线一次仅能执行一个内存读/写。
		• 经总线交换：如果多个分组同时到达路由器，每个位于不同的输出端口，除了一个分组外所有其他分组必须等待，因为一次只有一个分组能够跨越总线。不需要路
		由选择处理器的干扰。
		• 经互联网络交换：纵横式网络能够并行转发多个分组。然而，如果来自两个不同输入端口的两个分组其目的地为相同的输出端口，则一个分组必须在输入端等待，
		因为在某个时刻经给定总线仅有一个分组能够发送。
	4.3.3 输出端口
		取出存放在输出端口内存中的分组并将其发送到输出链路上。这包括选择和取出排队的分组进行传输，执行所需的链路层和物理层传输功能。
	4.3.4 何处出现排队
		在输入端口和输出端口处都能够形成分组队列。
		缓存数量(B)应当等于平均往返时延(RTT)乘以链路的容量(C)。
		当有大量的TCP流(N)流过一条链路时，缓存所需要的数量是B=RTT*C/np.power(N, 0.5)。对于通常有大量流经过的大型主干路由器链路，N值可能非常大，这使得所
		需的缓存长度的减小相当明显。
		输出端口排队的后果就是，在输出端口上的一个分组调度程序(packet scheduler)须在这些排队的分组中选出一个来发送。这种选择可能是根据简单的原则来定，如
		先来先服务(FCFS)调度，或者更复杂的调度规则，如加权公平排队(WFQ)。
		如果没有足够的内存来缓存一个入分组，那么必须做出决定：要么丢弃到达的分组(一种称为弃尾(drop-tail)的策略)，要么删除一个或多个己排队的分组来为新到的
		分组腾出空间。在某些情况下，在缓存填满前便丢弃(或在首部加标记)一个分组，以便向发送方提供1个拥塞信号的做法是有利的。有许多分组丢弃与标记策略统称为
		主动队列管理(Active Queue ManagemenL AQM)算法。随机旱期检(Random Early Detection, RED)算法是一种得到最广泛研究和实现的AQM算法。
		输入排队交换机中的线路前部(Head-Of-the-Line, HOL)阻塞
	4.3.5 路由选择控制平面
		网络范围的路由选择控制平面因此是分布式的，即不同部分(例如路由选择算法)执行在不同的路由器上并且通过彼此发送控制报文进行交互。
4.4 网际协议：因特网中的转发和编址
	因特网的网络层有三个主要组件，一是IP协议，二是路由选择部分，三是报告数据报中的差错和对某些网络层信息请求进行响应的设施：网络层差错和信息报告的协议，即
	互联网控制报文协议(Internet Control Message Protocol，ICMP)。
	4.4.1 数据包格式
		一个链路层帧能承载的最大数据量叫做最大传送单元(Maximum Transmission Unit, MTU)。因为每个据报封装在链路层帧中从1台路由器传输到下1台路由器，故链路
		层协议的MTU严格地限制着数据报的长度。对IP数据报长度具有严格限制并不是主要问题，问题在于在发送方与目的地路径上的每段链路可能使用不同的链路层协议，且
		每种协议可能具有不同MTU。
		同一较大数据报的片具有相同的标识；最后一个片的标志置为0，其他为1；片偏移指定了该片在初始IP数据报中的位置。
		除了最后一片的所有初始有效载荷数据的数量应当是8字节的倍数，并且偏移值应当被规定以8字节块为单位。
		在目的地，数据报的有效载荷仅当在IP层己完全重构为初始IP数据报时，才被传递给目的地运输层。
	4.4.2 IPv4编址
		1台主机通常只有1条链路连接到网络；当主机中的IP想发送一个数据报时，它就在该链路上发送。主机与物理链路之间的边界叫做接口(interface)。
		路由器与它的任意一条链路之间的边界也叫做接口。1个IP地址技术上是与一个接口相关联的，而不是与包括该接口的主机或路由器相关联的。这些地址一般按所谓点分
		十进制记法(dotted-decimal notation)书写。
		因特网的地址分配策略被称为无类别域间路由选择(Classless lnterdomain Routing, CIDR)。
		CIDR被采用之前，IP地址的网络部分被限制为长度为8、16、24比特，这是一种称为分类编址(classful addressing)的编址方案，这是因为具有8、16、24比特子网
		地址的子网分别被称为A、B和C类网络。
		动态主机配置协议(Dynamic Host Configuration, DHCP)允许主机自动获取(被分配)一个IP地址。网络管理员能够配置DHCP，以使某给定主机每次与网络连接时能得
		到一个相同的IP地址，或者某主机将被分配一个临时的IP地址(temporary IP address)，该地址在每次与网络连接时也许是不同的。
		即插即用协议(plug-and-play protocol)：由于DHCP具有能将主机连接进一个网络的网络相关方面的自动能力。
		• DHCP服务器发现：DHCP发现报文(DHCP discover message)。广播目的地址255.255.255.255并且使用"本主机"源地址0.0.0.0。
		• DHCP服务器提供：DHCP提供报文(DHCP offer message)。仍然使用广播地址255.255.255.255(因为可能有几个DHCP服务器)。每台服务器提供的报文包含有收到的
		发现报文的事务ID、向客户推荐的IP地址、网络掩码以及IP地址租用期(address leave time)。
		• DHCP请求：DHCP请求报文(DHCP request message)进行响应，回显配置参数。
		• DHCP ACK：DHCP ACK报文(DHCP ACK message)对DHCP请求报文进行响应，证实所要求的参数。
		网络地址转换(Network Address Translation, NAT)。
		NAT路由器上的一张NAT转换表(NAT translation table)，并且在表项中包含了端口号及其IP地址。
		有入反对NAT：
		• 端口号应该用于进程编址，而不是主机编址。
		• 路由器应仅当处理高达第三层的分组。
		• 主机彼此应相互直接通信，而不需要节点介入修改IP地址和端口号。
		• 应使用IPv6来解决IP地址短缺问题
	4.4.3 因特网控制报文协议
		ICPM报文被主机和路由器用来彼此沟通网络层的信息。ICMP最典型的用途是差错报告。
		ICMP通常被认为是IP的一部分，但从体系结构上讲它是位于IP之上的，因为ICMP报文是承载在IP分组中的。这就是说，ICMP报文是作为TP有效载荷承载的，就像TCP
		与UDP报文段作为IP有效载荷被承载那样。类似地，当一台主机收到一个指明上层协议为ICMP的IP数据报时，它分解出该数据报的内容给ICMP，就像分解出一个数据报
		的内容给TCP或UDP一样。
		ICMP报文有一个类型字段和一个编码字段，并且包含引起该ICMP报文首次生成的数据报的首部和前8字节内容(以便发送方能确定引发该差错的数据报)。
		ping程序发送一个ICMP类型8编码0的报文到指定主机。看到该回显(echo)请求，目的主机发回一个类型0编码0的ICMP回显回答。
		源主机中的Traceroute向目的主机发送一系列普通的IP数据报。这些数据报的每个携带了具有一个不可达UDP端口号的UDP报文段。第一个数据报的TTL为1，第二个的
		TTL为2，第三个的TTL为3，依次类推。该源主机也为每个数据报启动定时器。当第n个数据报到达第n台路由器时，第n台路由器观察到这个数据报的TTL正好过期。根
		据IP协议规则，路由器丢弃该数据报并发送一个ICMP告警报文给源主机(类型11编码6)。该告警报文包含了路由器的名字与它的地址。当该ICMP报文返回源主机时，源
		主机从定时器得到往返时延，从ICMP报文中得到第n台路由器的名字与IP地址。而目的主机将向源发送一个端口不可达的ICMP报文，这时源主机知道不需要发送探测分
		组了。
	4.4.4 IPv6
		改变：
		• 扩大的地址容量。IPv6地址长度从32比特增加到128比特这就确保全世界将不会用尽地址现在，地球上的每个沙砾都可以用IP地址寻址了。除了单播与多播地址以外
		，IPv6还引入了一种称为任播地址(anycast address)的新型地址，这种地址可以使数据报交付给一组主机中的任意一个。
		• 简化高效的40字节首部。
		• 流标签与优先级：IPv6有一个难以捉摸的流(f1ow)定义。该字段可用于“给属于特殊流的分组加上标签，这些特殊流是发送方要求进行特殊处理的流”，如一种非默认
		服务质量或需要实时服务的流飞例如，音频与视频传输就可能被当作一个流。
		• IPv6不允许在中间路由器上进行分片与重新组装，这种操作只能在源与目的地上执行。
		• 首部检验和也被抛弃。因为因特网层中的运输层(如TCP和UDP)和数据链路层(如以太网)协议执行了检验操作，IP设计者大概觉得在网络层中具有该项功能实属多余，
		可以将其去除。
		• 选项字段不再是标准IP首部的一部分了，但它并没有消失，而是可能出现IPv6首部中由“下一个首部”指出的位置上。
		ICMPv6还增加了新的类型和编码，其中包括“分组太大”类型与”未识别的IPv6选项”错误编码。ICMPv6还包含了用于管理主机加入和离开多播组的因特网组管理协议(I
		GMP)，它在IPv4中曾是一个与ICMP分开的独立协议。
		引入IPv6使能结点的最直接方式可能是一种双栈(dual-stack)方法，即使用该方法的IPv6结点还具有完整的IPv4实现。即IPv6数据包和IPv4数据包相互转化，但是这
		个会导致一些IPv6报文字段的丢失。
		另一种双栈方法，叫做建隧道(tunneling)。假定两个IPv6结点要使用IPv6数据报进行交互，但它们是经由中间IPv4路由器互联的。我们将两台IPv6路由器之间的
		中间IPv4路由器的集合称为一个隧道(tunnel)，借助于隧道，在隧道发送端的IPv6结点可将整个IPv6数据报放到一个IPv4数据报的数据(有效载荷)字段中。
	4.4.5 涉及IP安全性
		。。。
4.5 路由选择算法
	主机通常直接与一台路由器相连接，该路由器即为该主机的默认路由器(default router)，又称为该主机的第一跳路由器(first-hop rouler)。源主机的默认路由器称作
	源路由器(source router)，把目的主机的默认路由器称作目的路由器(destination router)。
	全局式路由选择算法(global routing algorithm)用完整的、全局性的网络知识计算从源到目的地之间的最低费用路径。具有全局状态信息的算法常被称作链路状态(Link
	state, LS)算法。
	分散式路由选择算法(decentralized routing algorithm)以迭代、分布式的方式计算最低费用路径。
	4.5.1 链路状态路由选择
		Dijkstra算法计算从某结点(源结点，我们称之为u)到网络中所有其他结点的最低费用路径。Dijkstra算法是迭代算法，其性质是经算法的第k次迭代后，可知道到k个
		目的结点的最低费用路径，在到所有目的结点的最低费用路径之中，这k条路径具有k个最低费用。我们定义下列记号：
		• D(v)：到算法的本次迭代，从源结点到目的结点v的最低费用路径的费用。
		• p(v)：从源到v沿着当前最低费用路径的前一结点(v的邻居)。
		• N'：结点子集；如果从源到v的最低费用路径已确知，v在N'中。
	4.5.2 距离矢量路由选择
		无穷计数问题(count-to-infinity)。
		毒性逆转(poisoned reverse)。
		如果z通过y路由选择到目的地x，则z将通告y，它(z)到x的距离是五穷大，即z将向y通告Dz(x)=无穷(即使z实际上知道Dz(x)=5)。只要z经y路由选择至x，z就持续地向
		y讲述这个善意的谎言。
		涉及3个或更多结点(而不只是两个直接相连的邻居结点)的环路将无法用毒性逆转技术检测到。
		比较LS与DV:
		• 报文复杂性：LS算法要求每个结点都知道网络中每条链路的费用。这就要求要发送O(N*E)个报文。而且无论何时一条链路的费用改变时，必须向所有结点发送新的链路
		费用。DV算法仅当在新的链路费用导致与该链路相连结点的最低费用路径发生改变时，才传播己改变的链路费用。
		• 收敛速度：LS算法的实现是一个要求O(N*E)个报文的O(np.power(N, 2))算法。DV算法收敛较慢，且在收敛时会遇到路由选择环路。DV算法还会遭遇无穷计数的问题。
		• 健壮性：在LS算法下，路由计算在某种程度上是分离的，提供了一定程度的健壮性。DV算法下，一个结点可向任意或所有目的结点通告其不正确的最低费用路径。DV算
		法中一个不正确的结点计算值会扩散到整个网络。
	4.5.3 层次路由选择
		自治系统(Autonomous System, AS)：一个AS是一个处于相同的管理与技术控制下的路由器的集合。
		一个自治系统内运行的路由选择算法叫做自治系统内部路由选择协议(intra-autonomous system routing protocol)。
		网关路由器(gateway router)
		每台路由器能够配置它的转发表以处理外部AS目的地。从相邻AS获取可达性信息和向该AS中所有路由器传播可达性信息是两项由自治系统间路由选择协议(inter-auton
		omous system routing protocol)处理的任务。
		因特网中的所有AS都运行相同的AS间路由选择协议，该协议称为BGP4。
		每台路由器接收来自一个AS内部路由选择协议和一个AS间路由选择协议的信息，并使用来自这两个协议的信息配置它的转发表。
4.6 因特网中的路由选择
	4.6.1 因特网自治系统内部的路由选择：RIP(Routing Information Protocol，路由选择信息协议)
		一种距离向量协议，以跳数为费用测度(即每条链路费用为1)，一条路径的最大费用被限制为15。每30秒交换RIP响应报文。
		如果一台路由器一旦超过180秒没有从邻居听到报文，则该邻居不再被认为是可达的;即要么其邻居死机了，要么连接的链路中断了。当这种情况发生时，RlP修改本地路由
		选择表，然后通过向相邻路由器(那些仍然可达的路由器)发送通告来传播该信息由器。也可通过使用RIP请求报文，请求其邻居到指定目的地的费用。
		端口520相互发送RIP请求与响应报文
	4.6.2 因特网自治系统内部的路由选择：OSPF(Open shortest path first，开放最短路径优先)
		OSPF和它的关系密切的表兄弟IS-IS通常都设置在上层的ISP中，而RIP却被设置在下层ISP和企业网。OSPF中的开放(Open)一词是指路由选择协议规范是公众可用的。
		OSPF的核心就是一个使用洪泛链路状态信息的链路状态协议和一个Dijkstra最低费用路径算法。使用OSPF一台路由器构建了一幅关于整个自治系统的完整拓扑阁。
		使用OSPF时，路由器向自治系统内所有其他路由器广播路由选择信息，而不仅仅是向其相邻路由器广播每当一条链路的状态发生变化时(如费用的变化或连接/中断状态的
		变化)，路由器就会广播链路状态信息即使链路状态未发生变化，它也要周期性地(至少每隔30分钟一次)广播链路状态。
		OSPF通告包含在OSPF报文中，该OSPF报文直接由IP承载，对OSPF其上层协议的值为89。因此OSPF协议必须自己实现诸如可靠报文传输、链路状态广播等功能。OSPF协议
		还要检查链路正在运行(通过向相连的邻居发送回HELLO报文)，并允许OSPF路由器获得相邻路由器的网络范围链路状态的数据库。
		OSPF优点：
		• 安全：使用鉴别技术，仅有受信任的路由器能参与一个AS内的OSPF协议，两种鉴别：简单的(明文口令之类的)和MD5；
		• 多条相同费用的路径。当到达某目的地的多条路径具有相同的费用时，OSPF允许使用多条路径。
		• 对单播与多播路由选择的综合支持。多播OSPF(MOSPF)提供对OSPF的简单扩展，以便提供多播路由选择。
		• 支持在单个路由选择域内的层次结构。也许OSPF最重要的优点是具有按层次结构构造一个自治系统的能力。
		一个 OSPF 自治系统可以配置成多个区域，每个区域都运行自己的OSPF链路状态路由选择算法。
		一个区域内的每台路由器都向该区域内的所有其他路由器广播其链路状态。在一个区域内，一台或多台区域边界路由器(area border router)负责为流向该区域以外的
		分组提供路由选择。最后，在AS内只有一个OSPF区域配置成主干(backbone)区域。主干区域的主要作用是为AS内其他区域之间的流量提供路由选择。该主干总是包含了AS
		内的所有区域边界路由器，并且可能还包含了一些非边界路由器。AS内的区域间的路由选择要求分组首先路由到一个区域边界路由器(区域内路由选择)，再通过主干路由
		到位于目的区域的区域边界路由器，然后再路由到最终目的地。
	4.6.3 自治系统间的路由选择：BGP(Border Gateway Protocol，边界网关协议)
		BGP为每个AS提供了进行以下工作的手段:
		1) 从相邻AS处获得子网可达性信息。ebgp
		2) 向本AS内部的所有路由器传播这些可达性信息。ibgp
		3) 基于可达性信息和AS策略，决定到达子网的“好”路由。
		4) 更为重要的是，BGP使得个子网向因特网的其余部分通告它的存在。
		BGP中，路由器对通过使用179端口的半永久TCP连接来交换路由选择信息。
		对于每条TCP连接，位于该连接端点的两台路由器称为BGP对等方(BGP peers)，沿着该连接发送所有BGP报文的TCP连接称为BGP会话(BGP session)此外，跨越两个AS B
		GP会话称为外部BGP(eBGP)会话(external BGP session)，在同一个AS中的两台路由器之间的BGP会话称为内部BGP(iBGP)会话(internal BGP session)。
		BGP中，目的地不是主机而是CIDR化的前缀(prefix)，每个前缀表示一个子网或个子网的集合。因此，例如假定有个子网与AS2相连：138.16.64/24，138.16.65/24，
		138.16.66/24，138.16.67/24。AS2能为这个子网聚合这些前级，并使用BGP向AS1通告单一前缀138.16.64/22。举个例子，假定这个子网中的前3个在AS2中，第四个子
		网138.16.67/24位于AS3中，因为路由器使用最长前缀匹配来转发数据报。所以AS3向ASl通告更特定的前缀138.16.67/24，而AS2仍然向ASl通告聚合的前缀138.16.64/
		22。
		在任何AS中的网关路由器接收到eBGP学习到的前缀后，该网关路由器使用它的iBGP会话来向该AS中的其他路由器发布这些前缀。当一台路由器(网关或不是网关)得知一个
		新前缀时，它为该前缀在其转发表中创建一个项。
		BGP中，一个自治系统由其全局唯一的自治系统号(Autonomous System Numher,ASN)所标识。并非每个AS有一个ASN。特殊是有一种所谓桩(slub)AS通常就没有ASN，这种
		桩AS仅承载源地址或目的地址为本AS的流量。
		当一台路由器通过BGP会话通告一个前缀时，它在前缀中包括一些BGP属性(BGP attribute)。用BGP术语来说，带有属性的前缀被称为一条路由(route)。两个较为重要的
		属性是AS-PATH和NEXT-HOP。
		• OPEN:建立TCP连接，
		• UPDATE:更新信息，
		• KEEPALIVE:验证TCP连接是否还连接着，检测链路问题等   
		• AS-PATH。该属性包含了前缀的通告已经通过的那些AS。当一个前缀传送到一个AS时，该AS将它的ASN增加到AS-PATH属性中。如果一台路由器看到它的AS被包括在该路
		径列表中，它将拒绝通告。
		• NEXT-HOP是一个开始某AS-PATH的路由器接口。
		如果对相同前缀存在两条或多条路由，则BGP顺序地调用下列消除规则，直到留下一条路由
		• 路由被指派1个本地偏好值作为它们的属性之一。
		• 在余下的路由中(所有都具有相同的本地偏好值)，具有最短AS-PATH的路由将被选择。
		• 在余下的路由中(所有都具有相同的本地偏好和相同的AS-PATH长度)，将选择具有最靠近NEXT-HOP路由器的路由。这里，最靠近是指具有最低费用路径的费用的路由器。
		• 如果仍留下多条路由，该路由器使用BGP标识符来选择路由。
		所有进入桩网络(slub network)的流量必定是去往该网络，所有离开桩网络的流量必定源于该网络。桩网络应该向其邻居通告它没有去往除了它自己以外目的地网络的路
		径。
		商业运行的ISP们都遵从的一个经验法则是：任何穿越某ISP主干网的流量必须是其源或目的(或两者)位于该ISP的某个客户网络中；
4.7 广播和多播路由选择
	4.7.1 广播路由选择
		洪泛flooding
		序号控制洪泛(sequence-number-controlled flooding)
		反向路径传播，RPF，Reverse Path Forwarding
		生成树广播
	4.7.2 多播
		多播地址：0b11100000.0.0.0 ~ 0b11101111.255.255.255
		多播+因特网组管理协议IGMP(主机和其相连路由器)+多播路由选择算法(遍及因特网)
		membership query 报文, membership report 报文, leave group 报文
4.8 小结


• 
	1. 估计往返时间
		EstimatedRTT.explain(P161)、DevRTT、SampleRTT
		EstimatedRTT = (1 -α) * EstimatedRTT +α * SampleRTT。α参考值是0.125
		DevRTT = (1 -β) * DevRTT +β * |SampleRTT - EstimatedRTT|。β推荐值0.25
	2.	设置和管理重传超时间隔
		TimeoutInterval = EstimatedRTI + 4 * DevRTT。推荐的初始TimeoutInterval值为1秒。

	当窗口长度是w字节，且当前往返时间是RTT秒时，则TCP的发送速率大约是ω/RTT。当一个丢包事件发生时，用W表示w的值。假设在连接持续期间RTT和W几乎不变，那么TCP
	的传输速率在W/(2RTT)到W/RTT之间变化。因此一条连接的平均速率是0.75W/RTT。丢包率L、往返时间RTT和最大报文段氏度MSS的函数：一条连接的平均吞吐量 = 
	1.22MSS/np.power(L, 0.5)*RTT
	
	Frequency-Division Multiplexing，FDM
	Time-Division mu1tiplexing，TDM
	Internet service provider，ISP
	Internet Engineering Task Force, IETF
	Request For Comment，RFC
    Point of Presence , PoP
    Internet exchange point, IXP

	Internet Protocol，IP
	Secure Sockets Layer,SSL
    HyperText Transfer Protocol, HTTP
	Round-Trip Time, RTT
	Content Distribution Network, CDN，内容分发网络
	Simple Mail Transfer Protocol, SMTP
	Post Office Protocol-Version 3, POP3
	Internet Mail Access Protocol, IMAP
	Domain Name System, DNS
    Resource Record, RR
    Distributed Hash Table, DHT

	Finile-Stale Machine, FSM
	Automatic Repeat request, ARQ，自动重传请求协议
	Go-Back-N, GBN
	Selective Repeat, SR
	Maximum Segment Size, MSS，最大报文段长度
	Maximum Transmission Unit, MTU，最大传输单元
	Resource- Management cell, RM信元
	Explicit Forward Congestion Indication, EFCI，显式转发拥塞指示
	Congestion Indication, CI，拥塞指示
	No Increase, NI，无增长
	Explicit Rate, ER，显式速率
	Additive-lncrease, Multiplicative-Decrease, AIMD
	Async Transfer Method, ATM

	Constant Bit Rale, CBR
	Available Bit Rale, ABR
	Virtual-Circuit, VC
	Active Queue ManagemenL AQM
	Random Early Detection, RED
	Head-Of-the-Line, HOL
	Internet Control Message Protocol，ICMP
	Classless lnterdomain Routing , CIDR
	Dynamic Host Configuration, DHCP，动态地址配置协议
	Network Address Translation, NAT
	Autonomous System, AS
	Routing Information Protocol, RIP
	Open Shortest Path First, OSPF
	Border Gateway Protocol, BGP
	Autonomous System Numher, ASN

	Medium Access Control, MAC，媒体访问控制协议
	Forward Error Correction, FEC，前向纠错
	Cyclic Redundancy Check, CRC，循环冗余校验
	Code Division Multiple Access, CDMA
	Carrier Sense Multiple Access, CSMA，载波侦昕多路访问
	CSMA with Collision Detection, CSMA/CD，具有碰撞检测的CSM
	Address Resolution Protocol，ARP，地址解析协议
	Virtual Local Network, VLAN
	Tag Protocol Identifier, TPID
	Multi-protocol Label Switching, MPLS，多协议标签交换 网络
	Virtual Private Network, VPN，虚拟专用网